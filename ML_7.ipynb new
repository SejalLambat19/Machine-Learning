{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/SejalLambat19/Machine-Learning/blob/main/ML_7.ipynb%20new\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1LMXGDQIoJW2",
        "outputId": "963483d1-99fb-4790-b3ad-78398a47a7c8"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: pandas in /usr/local/lib/python3.11/dist-packages (2.2.2)\n",
            "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.11/dist-packages (1.6.1)\n",
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.11/dist-packages (3.10.0)\n",
            "Requirement already satisfied: seaborn in /usr/local/lib/python3.11/dist-packages (0.13.2)\n",
            "Requirement already satisfied: numpy>=1.23.2 in /usr/local/lib/python3.11/dist-packages (from pandas) (1.26.4)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.1)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.1)\n",
            "Requirement already satisfied: scipy>=1.6.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (1.14.1)\n",
            "Requirement already satisfied: joblib>=1.2.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (1.4.2)\n",
            "Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (3.5.0)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.3.1)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (4.56.0)\n",
            "Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.4.8)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (24.2)\n",
            "Requirement already satisfied: pillow>=8 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (11.1.0)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (3.2.1)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas) (1.17.0)\n"
          ]
        }
      ],
      "source": [
        "# Install necessary libraries\n",
        "!pip install pandas scikit-learn matplotlib seaborn"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier\n",
        "from xgboost import XGBClassifier\n",
        "from sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "\n",
        "# Step 1: Load the Dataset\n",
        "url = \"https://raw.githubusercontent.com/jbrownlee/Datasets/master/pima-indians-diabetes.data.csv\"\n",
        "column_names = [\"Pregnancies\", \"Glucose\", \"BloodPressure\", \"SkinThickness\", \"Insulin\",\n",
        "                \"BMI\", \"DiabetesPedigreeFunction\", \"Age\", \"Outcome\"]\n",
        "data = pd.read_csv(url, names=column_names)\n",
        "\n",
        "# Step 2: Data Preprocessing\n",
        "X = data.drop(\"Outcome\", axis=1)  # Features\n",
        "y = data[\"Outcome\"]  # Target variable\n",
        "\n",
        "# Standardizing the dataset\n",
        "scaler = StandardScaler()\n",
        "X = scaler.fit_transform(X)\n",
        "\n",
        "# Step 3: Split Data into Training & Testing Sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Step 4: Initialize Ensemble Models\n",
        "models = {\n",
        "    \"Random Forest (Bagging)\": RandomForestClassifier(n_estimators=100, random_state=42),\n",
        "    \"AdaBoost\": AdaBoostClassifier(n_estimators=100, random_state=42),\n",
        "    \"Gradient Boosting\": GradientBoostingClassifier(n_estimators=100, random_state=42),\n",
        "    \"XGBoost\": XGBClassifier(n_estimators=100, use_label_encoder=False, eval_metric=\"logloss\", random_state=42)\n",
        "}\n",
        "\n",
        "# Step 5: Train, Evaluate & Store Performance Metrics\n",
        "accuracies = {}\n",
        "\n",
        "for name, model in models.items():\n",
        "    print(f\"Training {name}...\")\n",
        "\n",
        "    # Train the model\n",
        "    model.fit(X_train, y_train)\n",
        "\n",
        "    # Predictions\n",
        "    y_pred = model.predict(X_test)\n",
        "\n",
        "    # Accuracy score\n",
        "    acc = accuracy_score(y_test, y_pred)\n",
        "    accuracies[name] = acc\n",
        "\n",
        "    # Print results\n",
        "    print(f\"{name} Accuracy: {acc:.4f}\")\n",
        "    print(\"Classification Report:\\n\", classification_report(y_test, y_pred))\n",
        "    print(\"Confusion Matrix:\\n\", confusion_matrix(y_test, y_pred))\n",
        "    print(\"-\" * 50)\n",
        "\n",
        "# Step 6: Plot Accuracy Comparison\n",
        "plt.figure(figsize=(8, 6))\n",
        "plt.bar(accuracies.keys(), accuracies.values(), color=['blue', 'red', 'green', 'orange'])\n",
        "plt.xlabel(\"Models\")\n",
        "plt.ylabel(\"Accuracy Score\")\n",
        "plt.title(\"Model Accuracy Comparison\")\n",
        "plt.ylim(0.7, 0.76)  # Set a reasonable limit for accuracy\n",
        "plt.xticks(rotation=45)\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "VIAJZu5rsGS2",
        "outputId": "00e76ae5-1a13-4542-981f-ca702b88e798"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Training Random Forest (Bagging)...\n",
            "Random Forest (Bagging) Accuracy: 0.7273\n",
            "Classification Report:\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       0.79      0.79      0.79        99\n",
            "           1       0.62      0.62      0.62        55\n",
            "\n",
            "    accuracy                           0.73       154\n",
            "   macro avg       0.70      0.70      0.70       154\n",
            "weighted avg       0.73      0.73      0.73       154\n",
            "\n",
            "Confusion Matrix:\n",
            " [[78 21]\n",
            " [21 34]]\n",
            "--------------------------------------------------\n",
            "Training AdaBoost...\n",
            "AdaBoost Accuracy: 0.7403\n",
            "Classification Report:\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       0.81      0.78      0.79        99\n",
            "           1       0.63      0.67      0.65        55\n",
            "\n",
            "    accuracy                           0.74       154\n",
            "   macro avg       0.72      0.73      0.72       154\n",
            "weighted avg       0.75      0.74      0.74       154\n",
            "\n",
            "Confusion Matrix:\n",
            " [[77 22]\n",
            " [18 37]]\n",
            "--------------------------------------------------\n",
            "Training Gradient Boosting...\n",
            "Gradient Boosting Accuracy: 0.7468\n",
            "Classification Report:\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       0.81      0.79      0.80        99\n",
            "           1       0.64      0.67      0.65        55\n",
            "\n",
            "    accuracy                           0.75       154\n",
            "   macro avg       0.73      0.73      0.73       154\n",
            "weighted avg       0.75      0.75      0.75       154\n",
            "\n",
            "Confusion Matrix:\n",
            " [[78 21]\n",
            " [18 37]]\n",
            "--------------------------------------------------\n",
            "Training XGBoost...\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/xgboost/core.py:158: UserWarning: [17:16:11] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "XGBoost Accuracy: 0.7078\n",
            "Classification Report:\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       0.79      0.74      0.76        99\n",
            "           1       0.58      0.65      0.62        55\n",
            "\n",
            "    accuracy                           0.71       154\n",
            "   macro avg       0.69      0.70      0.69       154\n",
            "weighted avg       0.72      0.71      0.71       154\n",
            "\n",
            "Confusion Matrix:\n",
            " [[73 26]\n",
            " [19 36]]\n",
            "--------------------------------------------------\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "BONUS ASSIGNMENT\n"
      ],
      "metadata": {
        "id": "1A4_SuplAaUF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Import libraries\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "from sklearn.model_selection import train_test_split, GridSearchCV\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.metrics import accuracy_score, confusion_matrix, classification_report\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "\n",
        "# Step 1: Load dataset\n",
        "url = 'https://raw.githubusercontent.com/jbrownlee/Datasets/master/pima-indians-diabetes.data.csv'\n",
        "columns = ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin',\n",
        "           'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\n",
        "df = pd.read_csv(url, names=columns)\n",
        "\n",
        "# Step 2: Replace 0s with NaN for specific columns & fill with median\n",
        "cols_with_zeros = ['Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI']\n",
        "df[cols_with_zeros] = df[cols_with_zeros].replace(0, np.nan)\n",
        "df.fillna(df.median(), inplace=True)\n",
        "\n",
        "# Step 3: Split features and target\n",
        "X = df.drop('Outcome', axis=1)\n",
        "y = df['Outcome']\n",
        "\n",
        "# Step 4: Scale features\n",
        "scaler = StandardScaler()\n",
        "X_scaled = scaler.fit_transform(X)\n",
        "\n",
        "# Step 5: Train-test split\n",
        "X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Step 6: Train Random Forest model\n",
        "rf = RandomForestClassifier(random_state=42)\n",
        "rf.fit(X_train, y_train)\n",
        "y_pred = rf.predict(X_test)\n",
        "\n",
        "# Step 7: Evaluate base model\n",
        "print(\"Initial Accuracy:\", accuracy_score(y_test, y_pred))\n",
        "print(\"\\nConfusion Matrix:\\n\", confusion_matrix(y_test, y_pred))\n",
        "print(\"\\nClassification Report:\\n\", classification_report(y_test, y_pred))\n",
        "\n",
        "# Step 8: Hyperparameter tuning\n",
        "param_grid = {\n",
        "    'n_estimators': [100, 150],\n",
        "    'max_depth': [4, 6, None],\n",
        "    'min_samples_split': [2, 5],\n",
        "    'min_samples_leaf': [1, 2]\n",
        "}\n",
        "\n",
        "grid = GridSearchCV(RandomForestClassifier(random_state=42), param_grid, cv=5, scoring='accuracy')\n",
        "grid.fit(X_train, y_train)\n",
        "best_rf = grid.best_estimator_\n",
        "y_best = best_rf.predict(X_test)\n",
        "\n",
        "# Step 9: Evaluate tuned model\n",
        "print(\"Best Parameters:\", grid.best_params_)\n",
        "print(\"Tuned Accuracy:\", accuracy_score(y_test, y_best))\n",
        "print(\"\\nConfusion Matrix:\\n\", confusion_matrix(y_test, y_best))\n",
        "print(\"\\nClassification Report:\\n\", classification_report(y_test, y_best))\n",
        "\n",
        "# Step 10: Feature importance\n",
        "importances = best_rf.feature_importances_\n",
        "feat_df = pd.DataFrame({'Feature': X.columns, 'Importance': importances})\n",
        "feat_df = feat_df.sort_values(by='Importance', ascending=False)\n",
        "\n",
        "plt.figure(figsize=(8, 5))\n",
        "sns.barplot(x='Importance', y='Feature', data=feat_df)\n",
        "plt.title('Feature Importance - Random Forest')\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "xizcDEu5Ad2w",
        "outputId": "a873c2b1-09f3-4654-d685-6ecf475e67b8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Initial Accuracy: 0.7402597402597403\n",
            "\n",
            "Confusion Matrix:\n",
            " [[78 21]\n",
            " [19 36]]\n",
            "\n",
            "Classification Report:\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       0.80      0.79      0.80        99\n",
            "           1       0.63      0.65      0.64        55\n",
            "\n",
            "    accuracy                           0.74       154\n",
            "   macro avg       0.72      0.72      0.72       154\n",
            "weighted avg       0.74      0.74      0.74       154\n",
            "\n",
            "Best Parameters: {'max_depth': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'n_estimators': 100}\n",
            "Tuned Accuracy: 0.7402597402597403\n",
            "\n",
            "Confusion Matrix:\n",
            " [[78 21]\n",
            " [19 36]]\n",
            "\n",
            "Classification Report:\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       0.80      0.79      0.80        99\n",
            "           1       0.63      0.65      0.64        55\n",
            "\n",
            "    accuracy                           0.74       154\n",
            "   macro avg       0.72      0.72      0.72       154\n",
            "weighted avg       0.74      0.74      0.74       154\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x500 with 1 Axes>"
            ],
            "image/png": "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Bz399NMKDw/XuXPn5OvrK0kqUqRIlgfa1apV05IlS1S0aNFMZ2AyBAQE6Ndff1WDBg0kXT1bknFvQ1bKlSunK1euaNu2bapevbqkq/efnD9/Ptv6r61n//79WdaaMf3UqVNycHC44X0k2fHz89PFixd16dIla6jJ6eN9Q0JC5OrqqvXr16t79+6Zpme1H69XtmxZOTk5adOmTdZL11JTU7Vlyxa+DwQAAOAW5SpYzJgxQ0OGDNFrr72m0aNHWw/afHx8NHny5BwFi5SUFJ06dUppaWn6559/tGbNGo0dO1atW7dWly5dMrUPCQnRsWPHtHjxYtWsWVPffPNNljcvu7i4KCIiQhMnTlRCQoL69u2r9u3bW6+zHz58uPr27Stvb2+Fh4crJSVFv//+u86fP69+/fqpaNGicnV11Zo1a/TAAw/IxcVF3t7eN53vvffeU0BAgKpWrSo7Ozt9/vnn8vf3v6VHm3bq1EkTJkxQ27ZtNWLECD3wwAM6evSovvzySw0aNEgPPPCAXn31VY0bN04hISEqX7683nvvPV24cCHbPsuXL6+mTZuqZ8+emjFjhhwdHdW/f3+5urpme6lZhiFDhqh169YqWbKknn76adnZ2WnHjh36888/NWrUKDVt2lR16tRRu3btNH78eD344IM6efKkvvnmGz3xxBOZLq26Xu3ateXm5qa33npLffv21a+//prj75ZwcXHRG2+8oUGDBsnJyUl169bVmTNntHv3bnXr1i3b/Xgtd3d39erVSwMHDpSvr69Kliyp8ePHKykpSd26dctRPQAAAPerXD0VaurUqZo9e7befvttm0uHatSooV27duWorzVr1iggIEClSpVSeHi4fvjhB02ZMkVfffVVlpclPf7443r99dfVp08fValSRT///LMGDx6cqV1wcLCefPJJtWzZUs2bN1doaKjNY2G7d++uOXPmaN68eapUqZIaNmyo6Oho6+VXDg4OmjJlimbNmqXixYtbw9LN5vP09NT48eNVo0YN1axZU0eOHNGqVatu6b4CNzc3bdiwQSVLltSTTz6pChUqqFu3bkpOTraewejfv786d+6siIgI1alTR56ennriiSdu2O+CBQtUrFgxNWjQQE888YR69OghT0/PbG84zhAWFqaVK1fqu+++U82aNfXII4/o/ffft36qb7FYtGrVKjVo0EAvvPCC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\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}